# docker-compose.yml

services:
  # Define the API service
  api:
    # Build configuration for the API service
    build:
      context: .  # The build context is the current directory
      dockerfile: docker/development/Dockerfile  # Specify the Dockerfile to use for building the image
    container_name: productivity-api  # Name of the container for easier identification
    ports:
      - "3000:3000"  # Map host port 3000 to container port 3000 for accessing the API
      - "9229:9229"  # Map host port 9229 to container port 9229 for debugging
    volumes:
      - .:/app        # Mount the source code directory from the host to the container
      - /app/node_modules  # Use a named volume for node_modules to persist dependencies
    environment:
      - NODE_ENV=development  # Set the environment variable NODE_ENV to development
      - DATABASE_URL=postgresql://user:password@postgres:5432/productivity_db  # Set the database connection URL
      - PORT=3000  # Set the port for the API
    depends_on:
      postgres:
        condition: service_healthy  # Wait for the PostgreSQL service to be healthy before starting the API
    command: npm run start:dev  # Command to start the API in development mode

  # Define the PostgreSQL database service
  postgres:
    image: postgres:16-alpine  # Use the official PostgreSQL image with Alpine Linux
    container_name: productivity-db  # Name of the container for easier identification
    ports:
      - "5433:5432"  # Map host port 5432 to container port 5432 for accessing PostgreSQL
    environment:
      POSTGRES_USER: user  # Set the PostgreSQL username
      POSTGRES_PASSWORD: password  # Set the PostgreSQL password
      POSTGRES_DB: productivity_db  # Set the PostgreSQL database name
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Use a named volume for PostgreSQL data to persist the database
      # Optional: Mount initialization scripts to automatically run on container startup
      # - ./src/database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d productivity_db"]  # Command to check if PostgreSQL is ready
      interval: 5s  # Interval between health checks
      timeout: 5s  # Timeout for each health check
      retries: 5  # Number of retries before considering the service unhealthy

  # Optional: Define the pgAdmin service for database management
  pgadmin:
    image: dpage/pgadmin4  # Use the official pgAdmin image
    container_name: productivity-pgadmin  # Name of the container for easier identification
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com  # Set the default email for pgAdmin login
      PGADMIN_DEFAULT_PASSWORD: admin  # Set the default password for pgAdmin login
    ports:
      - "5050:80"  # Map host port 5050 to container port 80 for accessing pgAdmin
    depends_on:
      - postgres  # Wait for the PostgreSQL service to be available before starting pgAdmin

# Define named volumes to persist data
volumes:
  postgres_data:
    name: productivity-postgres-data  # Named volume for PostgreSQL data
  node_modules:
    name: productivity-node-modules